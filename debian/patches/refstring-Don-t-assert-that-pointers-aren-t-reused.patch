From: Simon McVittie <smcv@debian.org>
Date: Thu, 2 Aug 2018 12:13:31 +0100
Subject: refstring: Don't assert that pointers aren't reused

The intention here seems to have been to assert that after both p and
s have been released, "hello, world" is removed from the table of
interned strings on last-unref, and so interning the same text again
yields a new refstring. However, there is nothing to stop the malloc()
implementation from reusing the same memory block for the new refstring
(and in fact this is reasonably likely to happen, since it's
recently-freed and is of the correct size).

Bug: https://gitlab.gnome.org/GNOME/glib/issues/1468
---
 glib/tests/refstring.c | 5 -----
 1 file changed, 5 deletions(-)

diff --git a/glib/tests/refstring.c b/glib/tests/refstring.c
index 41ab0c0..4d58eec 100644
--- a/glib/tests/refstring.c
+++ b/glib/tests/refstring.c
@@ -98,11 +98,6 @@ test_refstring_intern (void)
 
   g_test_message ("releasing s[%p] ('%s')", s, s);
   g_ref_string_release (s);
-
-  p = g_ref_string_new_intern ("hello, world");
-  g_test_message ("p[%p] ('%s') != s[%p]", p, p, s);
-  g_assert_false (s == p);
-  g_ref_string_release (p);
 }
 
 int
